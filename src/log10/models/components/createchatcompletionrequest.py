"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .chatcompletionfunctioncalloption import ChatCompletionFunctionCallOption
from .chatcompletionfunctions import ChatCompletionFunctions
from .chatcompletionrequestmessage import ChatCompletionRequestMessage
from .chatcompletionstreamoptions import ChatCompletionStreamOptions
from .chatcompletiontool import ChatCompletionTool
from .chatcompletiontoolchoiceoption import ChatCompletionToolChoiceOption
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from log10 import utils
from typing import Dict, List, Optional, Union


class Two(str, Enum):
    GPT_4_TURBO = 'gpt-4-turbo'
    GPT_4_TURBO_2024_04_09 = 'gpt-4-turbo-2024-04-09'
    GPT_4_0125_PREVIEW = 'gpt-4-0125-preview'
    GPT_4_TURBO_PREVIEW = 'gpt-4-turbo-preview'
    GPT_4_1106_PREVIEW = 'gpt-4-1106-preview'
    GPT_4_VISION_PREVIEW = 'gpt-4-vision-preview'
    GPT_4 = 'gpt-4'
    GPT_4_0314 = 'gpt-4-0314'
    GPT_4_0613 = 'gpt-4-0613'
    GPT_4_32K = 'gpt-4-32k'
    GPT_4_32K_0314 = 'gpt-4-32k-0314'
    GPT_4_32K_0613 = 'gpt-4-32k-0613'
    GPT_3_5_TURBO = 'gpt-3.5-turbo'
    GPT_3_5_TURBO_16K = 'gpt-3.5-turbo-16k'
    GPT_3_5_TURBO_0301 = 'gpt-3.5-turbo-0301'
    GPT_3_5_TURBO_0613 = 'gpt-3.5-turbo-0613'
    GPT_3_5_TURBO_1106 = 'gpt-3.5-turbo-1106'
    GPT_3_5_TURBO_0125 = 'gpt-3.5-turbo-0125'
    GPT_3_5_TURBO_16K_0613 = 'gpt-3.5-turbo-16k-0613'


class CreateChatCompletionRequestType(str, Enum):
    r"""Must be one of `text` or `json_object`."""
    TEXT = 'text'
    JSON_OBJECT = 'json_object'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ResponseFormat:
    r"""An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.

    Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON.

    **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
    """
    type: Optional[CreateChatCompletionRequestType] = dataclasses.field(default=CreateChatCompletionRequestType.TEXT, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Must be one of `text` or `json_object`."""
    



class One(str, Enum):
    r"""`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function."""
    NONE = 'none'
    AUTO = 'auto'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateChatCompletionRequest:
    UNSET='__SPEAKEASY_UNSET__'
    messages: List[ChatCompletionRequestMessage] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messages') }})
    r"""A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models)."""
    model: Model = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model') }})
    r"""ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API."""
    frequency_penalty: Optional[float] = dataclasses.field(default=0, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequency_penalty'), 'exclude': lambda f: f is CreateChatCompletionRequest.UNSET }})
    r"""Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.

    [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
    """
    logit_bias: Optional[Dict[str, int]] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logit_bias'), 'exclude': lambda f: f is CreateChatCompletionRequest.UNSET }})
    r"""Modify the likelihood of specified tokens appearing in the completion.

    Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    """
    logprobs: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logprobs'), 'exclude': lambda f: f is CreateChatCompletionRequest.UNSET }})
    r"""Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`."""
    top_logprobs: Optional[int] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('top_logprobs'), 'exclude': lambda f: f is CreateChatCompletionRequest.UNSET }})
    r"""An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used."""
    max_tokens: Optional[int] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_tokens'), 'exclude': lambda f: f is CreateChatCompletionRequest.UNSET }})
    r"""The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.

    The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
    """
    n: Optional[int] = dataclasses.field(default=1, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('n'), 'exclude': lambda f: f is CreateChatCompletionRequest.UNSET }})
    r"""How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs."""
    presence_penalty: Optional[float] = dataclasses.field(default=0, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('presence_penalty'), 'exclude': lambda f: f is CreateChatCompletionRequest.UNSET }})
    r"""Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.

    [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
    """
    response_format: Optional[ResponseFormat] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response_format'), 'exclude': lambda f: f is None }})
    r"""An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.

    Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON.

    **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
    """
    seed: Optional[int] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seed'), 'exclude': lambda f: f is CreateChatCompletionRequest.UNSET }})
    r"""This feature is in Beta.
    If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
    Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
    """
    stop: Optional[Stop] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stop'), 'exclude': lambda f: f is CreateChatCompletionRequest.UNSET }})
    r"""Up to 4 sequences where the API will stop generating further tokens."""
    stream: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stream'), 'exclude': lambda f: f is CreateChatCompletionRequest.UNSET }})
    r"""If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions)."""
    stream_options: Optional[ChatCompletionStreamOptions] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stream_options'), 'exclude': lambda f: f is CreateChatCompletionRequest.UNSET }})
    r"""Options for streaming response. Only set this when you set `stream: true`."""
    temperature: Optional[float] = dataclasses.field(default=1, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('temperature'), 'exclude': lambda f: f is CreateChatCompletionRequest.UNSET }})
    r"""What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

    We generally recommend altering this or `top_p` but not both.
    """
    top_p: Optional[float] = dataclasses.field(default=1, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('top_p'), 'exclude': lambda f: f is CreateChatCompletionRequest.UNSET }})
    r"""An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

    We generally recommend altering this or `temperature` but not both.
    """
    tools: Optional[List[ChatCompletionTool]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tools'), 'exclude': lambda f: f is None }})
    r"""A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported."""
    tool_choice: Optional[ChatCompletionToolChoiceOption] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tool_choice'), 'exclude': lambda f: f is None }})
    r"""Controls which (if any) tool is called by the model.
    `none` means the model will not call any tool and instead generates a message.
    `auto` means the model can pick between generating a message or calling one or more tools.
    `required` means the model must call one or more tools.
    Specifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.

    `none` is the default when no tools are present. `auto` is the default if tools are present.
    """
    user: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids)."""
    function_call: Optional[CreateChatCompletionRequestFunctionCall] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('function_call'), 'exclude': lambda f: f is None }})
    r"""Deprecated in favor of `tool_choice`.

    Controls which (if any) function is called by the model.
    `none` means the model will not call a function and instead generates a message.
    `auto` means the model can pick between generating a message or calling a function.
    Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.

    `none` is the default when no functions are present. `auto` is the default if functions are present.

    Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
    """
    functions: Optional[List[ChatCompletionFunctions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('functions'), 'exclude': lambda f: f is None }})
    r"""Deprecated in favor of `tools`.

    A list of functions the model may generate JSON inputs for.

    Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
    """
    


Model = Union[str, Two]

Stop = Union[str, List[str]]

CreateChatCompletionRequestFunctionCall = Union[One, ChatCompletionFunctionCallOption]
